{
  "_args": [
    [
      {
        "raw": "css-modules-loader-core@https://registry.npmjs.org/css-modules-loader-core/-/css-modules-loader-core-1.0.1.tgz",
        "scope": null,
        "escapedName": "css-modules-loader-core",
        "name": "css-modules-loader-core",
        "rawSpec": "https://registry.npmjs.org/css-modules-loader-core/-/css-modules-loader-core-1.0.1.tgz",
        "spec": "https://registry.npmjs.org/css-modules-loader-core/-/css-modules-loader-core-1.0.1.tgz",
        "type": "remote"
      },
      "C:\\SPdritt\\Fabric\\Fabricdritt\\FabricUI\\office-ui-fabric-react-master\\common"
    ]
  ],
  "_from": "css-modules-loader-core@>=1.0.1 <2.0.0",
  "_id": "css-modules-loader-core@1.0.1",
  "_inCache": true,
  "_location": "/css-modules-loader-core",
  "_phantomChildren": {
    "has-flag": "1.0.0",
    "js-base64": "2.1.9"
  },
  "_requested": {
    "raw": "css-modules-loader-core@https://registry.npmjs.org/css-modules-loader-core/-/css-modules-loader-core-1.0.1.tgz",
    "scope": null,
    "escapedName": "css-modules-loader-core",
    "name": "css-modules-loader-core",
    "rawSpec": "https://registry.npmjs.org/css-modules-loader-core/-/css-modules-loader-core-1.0.1.tgz",
    "spec": "https://registry.npmjs.org/css-modules-loader-core/-/css-modules-loader-core-1.0.1.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/",
    "/postcss-modules"
  ],
  "_resolved": "https://registry.npmjs.org/css-modules-loader-core/-/css-modules-loader-core-1.0.1.tgz",
  "_shasum": "94e3eec9bc8174df0f974641f3e0d0550497f694",
  "_shrinkwrap": null,
  "_spec": "css-modules-loader-core@https://registry.npmjs.org/css-modules-loader-core/-/css-modules-loader-core-1.0.1.tgz",
  "_where": "C:\\SPdritt\\Fabric\\Fabricdritt\\FabricUI\\office-ui-fabric-react-master\\common",
  "author": {
    "name": "Glen Maddern"
  },
  "bugs": {
    "url": "https://github.com/css-modules/css-modules-loader-core/issues"
  },
  "dependencies": {
    "icss-replace-symbols": "1.0.2",
    "postcss": "5.1.2",
    "postcss-modules-extract-imports": "1.0.0",
    "postcss-modules-local-by-default": "1.1.1",
    "postcss-modules-scope": "1.0.2",
    "postcss-modules-values": "1.2.2"
  },
  "description": "A loader-agnostic CSS Modules implementation, based on PostCSS",
  "devDependencies": {
    "babel": "5.8.29",
    "babel-eslint": "4.1.3",
    "babelify": "6.4.0",
    "chokidar-cli": "1.1.0",
    "eslint": "3.3.1",
    "mocha": "3.0.2"
  },
  "directories": {
    "test": "test"
  },
  "files": [
    "lib"
  ],
  "homepage": "https://github.com/css-modules/css-modules-loader-core",
  "keywords": [
    "css-modules",
    "postcss",
    "loader"
  ],
  "license": "ISC",
  "main": "lib/index.js",
  "name": "css-modules-loader-core",
  "optionalDependencies": {},
  "readme": "# CSS Module Loader Core\n> A loader-agnostic CSS Modules implementation, based on PostCSS\n\n[![Build Status](https://travis-ci.org/css-modules/css-modules-loader-core.svg?branch=master)](https://travis-ci.org/css-modules/css-modules-loader-core)\n\n## API\n\n```js\nimport Core from 'css-modules-loader-core'\nlet core = new Core()\n```\n\n### core.load( sourceString , sourcePath , pathFetcher ) =><br>&nbsp;&nbsp;Promise({ injectableSource, exportTokens })\n\nProcesses the input CSS `sourceString`, looking for dependencies such as `@import` or `:import`. Any localisation will happen by prefixing a sanitised version of `sourcePath` When dependencies are found, it will ask the `pathFetcher` for each dependency, resolve & inline any imports, and return the following object:\n\n- `injectableSource`: the final, merged CSS file without `@import` or `:import` statements\n- `exportTokens`: the mapping from local name to scoped name, as described in the file's `:export` block\n\nThese should map nicely to what your build-tool-specific loader needs to do its job.\n\n### new Core([plugins])\n\nThe default set of plugins is [[postcss-modules-local-by-default](https://github.com/css-modules/postcss-modules-local-by-default), [postcss-modules-extract-imports](https://github.com/css-modules/postcss-modules-extract-imports), [postcss-modules-scope](https://github.com/css-modules/postcss-modules-scope)] (i.e. the CSS Modules specification). This can override which PostCSS plugins you wish to execute, e.g.\n\n```js\nimport Core from 'css-loader-core'\nimport autoprefixer from 'autoprefixer'\nimport colorFunctions from 'postcss-color-function'\n\n// Don't run local-by-default, but use colorFunctions \n// beforehand and autoprefixer afterwards:\nlet core = new Core([\n  colorFunctions, \n  core.plugins.extractImports, \n  core.plugins.scope, \n  autoprefixer(\"Last 2 Versions\")\n])\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/css-modules/css-modules-loader-core.git"
  },
  "scripts": {
    "autotest": "chokidar src test -c 'npm test'",
    "build": "babel --out-dir lib src",
    "lint": "eslint src",
    "prepublish": "rm -rf lib/* && npm run build",
    "test": "mocha --compilers js:babel/register"
  },
  "version": "1.0.1"
}
