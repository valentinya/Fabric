{"version":3,"sources":["utilities/debugging.ts"],"names":[],"mappings":";AAAA,+BAA8B;AAE9B,0BAAiC,MAAW,EAAE,UAAkB;IAC9D,IAAM,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;IAE1C,MAAM,CAAC,UAAU,CAAC,GAAG;QACnB,WAAI,EAAE,CAAC;QAEP,IAAI,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAClC,IAAI,MAAM,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACnD,IAAI,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;QAE7C,+BAA+B;QAC/B,EAAE,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC;YAClB,OAAO,CAAC,GAAG,CAAK,UAAU,YAAU,EAAE,aAAa,EAAE,CAAC,CAAC;QACzD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC;YAC1B,OAAO,CAAC,IAAI,CAAK,UAAU,sBAAmB,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,IAAI,OAAK,EAAE,aAAa,EAAE,CAAC,CAAC;QAC1G,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,KAAK,CAAK,UAAU,sBAAmB,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,IAAI,OAAK,EAAE,aAAa,EAAE,CAAC,CAAC;QAC3G,CAAC;QACD,8BAA8B;QAE9B,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC;AAtBD,4CAsBC;AAED;IACE,IAAI,GAAG,GAAG;QACR,KAAK,EAAE,EAAE;KACV,CAAC;IAEF,sCAAsC;IACtC,IAAM,iBAAiB,GAAG,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACrD,qCAAqC;IAErC,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACtB,iBAAiB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QACtC,IAAI,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAE1C,GAAG,CAAC,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;AACnB,CAAC;AAjBD,sCAiBC","file":"utilities/debugging.js","sourcesContent":["import { beep } from './beep';\n\nexport function instrumentMethod(target: any, methodName: string) {\n  const originalMethod = target[methodName];\n\n  target[methodName] = function() {\n    beep();\n\n    let startTime = performance.now();\n    let retVal = originalMethod.apply(this, arguments);\n    let duration = performance.now() - startTime;\n\n    /* tslint:disable:no-console */\n    if (duration <= 1) {\n      console.log(`${ methodName } called`, getStackTrace());\n    } else if (duration <= 10) {\n      console.warn(`${ methodName } called, took ${ Math.round(duration * 1000) / 1000 }ms`, getStackTrace());\n    } else {\n      console.error(`${ methodName } called, took ${ Math.round(duration * 1000) / 1000 }ms`, getStackTrace());\n    }\n    /* tslint:enable:no-console */\n\n    return retVal;\n  };\n}\n\nexport function getStackTrace() {\n  let obj = {\n    stack: ''\n  };\n\n  /* tslint:disable:no-string-literal */\n  const captureStackTrace = Error['captureStackTrace'];\n  /* tslint:enable:no-string-literal */\n\n  if (captureStackTrace) {\n    captureStackTrace(obj, getStackTrace);\n    let stackEntries = obj.stack.split('at ');\n\n    obj.stack = stackEntries[2];\n  }\n\n  return obj.stack;\n}\n"],"sourceRoot":"..\\..\\src"}