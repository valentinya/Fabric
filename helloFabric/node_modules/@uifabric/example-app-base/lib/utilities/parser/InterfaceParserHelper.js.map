{"version":3,"sources":["utilities/parser/InterfaceParserHelper.ts"],"names":[],"mappings":";;;;;;AAAA,2CAA0C;AAC1C,2CAAyE;AAEzE,IAAM,aAAa,GAAG,UAAU,CAAC;AACjC,IAAM,kBAAkB,GAAG,eAAe,CAAC;AAC3C,IAAM,gBAAgB,GAAG,aAAa,CAAC;AACvC;;GAEG;AACH,IAAK,UAEJ;AAFD,WAAK,UAAU;IACb,iDAAO,CAAA;IAAE,iDAAO,CAAA;IAAE,yDAAW,CAAA;AAC/B,CAAC,EAFI,UAAU,KAAV,UAAU,QAEd;AAED;;GAEG;AACH;IAA2C,yCAAU;IAGnD;;;OAGG;IACH,+BAAmB,GAAW;QAA9B,YACE,kBAAM,GAAG,CAAC,SACX;QARO,YAAM,GAAe,UAAU,CAAC,OAAO,CAAC;;IAQhD,CAAC;IAEM,qCAAK,GAAZ;QACE,IAAI,IAAI,GAAkB,EAAE,CAAC;QAC7B,IAAI,OAAO,GAAG,EAAE,CAAC;QACjB,IAAI,cAAc,GAAG,EAAE,CAAC;QACxB,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,IAAI,YAAY,GAAG,KAAK,CAAC;QACzB,IAAI,iBAAiB,GAAG,EAAE,CAAC;QAC3B,IAAI,6BAA6B,GAAG,KAAK,CAAC;QAE1C,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;QACpB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAEd,GAAG,CAAC;YACF,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;gBACpB,KAAK,UAAU,CAAC,OAAO;oBACrB,IAAI,CAAC,oBAAoB,EAAE,CAAC;oBAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBAClB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;4BACxB,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC;wBACnC,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,qBAAqB;4BACrB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;wBACxB,CAAC;oBACH,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;wBACzB,UAAU;wBACV,KAAK,CAAC;oBACR,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,WAAW,CAAC;oBACvC,CAAC;oBAED,KAAK,CAAC;gBACR,KAAK,UAAU,CAAC,OAAO;oBACrB,CAAC;wBACC,uFAAuF;wBACvF,IAAI,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;wBAClC,EAAE,CAAC,CAAC,CAAC,6BAA6B,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BAC5E,kCAAkC;4BAClC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC;4BAC/B,IAAI,GAAG,EAAE,CAAC;4BACV,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC;4BACjC,KAAK,CAAC;wBACR,CAAC;wBAED,6BAA6B,GAAG,KAAK,CAAC;wBAEtC,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;wBACnC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;wBAEf,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;4BACxB,IAAI,KAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;4BAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;gCACxB,6FAA6F;gCAC7F,IAAI,CAAC,IAAI,CAAC,KAAG,CAAC,CAAC;4BACjB,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACN,0DAA0D;gCAC1D,6BAA6B,GAAG,IAAI,CAAC;4BACvC,CAAC;wBACH,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;4BAChC,kBAAkB;4BAClB,IAAI,CAAC,oBAAoB,EAAE,CAAC;wBAC9B,CAAC;wBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;4BAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;gCACpE,2FAA2F;gCAC3F,IAAI,KAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gCAClC,YAAY,GAAG,KAAG,CAAC;gCACnB,IAAI,CAAC,oBAAoB,EAAE,CAAC;4BAC9B,CAAC;4BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;gCAC1C,IAAI,KAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;gCAClC,YAAY,GAAG,IAAI,CAAC;gCACpB,iBAAiB,GAAG,KAAG,CAAC;4BAC1B,CAAC;4BAAC,IAAI,CAAC,CAAC;gCACN,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;4BAC3B,CAAC;wBACH,CAAC;oBACH,CAAC;oBACD,KAAK,CAAC;gBACR,KAAK,UAAU,CAAC,WAAW;oBACzB,CAAC;wBACC,IAAI,CAAC,oBAAoB,EAAE,CAAC;wBAC5B,IAAI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;wBACnC,cAAc,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;wBAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;4BAClB,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;4BAC1B,IAAI,GAAG,GAAG,CAAC;wBAEb,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,6BAA6B;4BAC7B,IAAI,GAAG,aAAa,CAAC;wBACvB,CAAC;wBAED,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,6BAA6B;wBAE5C,IAAI,UAAU,GAAG,cAAc,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC;wBACnE,IAAI,QAAQ,GAAG,YAAY,GAAG,kCAAqB,CAAC,UAAU,GAAG,CAAC,UAAU,GAAG,kCAAqB,CAAC,QAAQ,GAAG,kCAAqB,CAAC,QAAQ,CAAC,CAAC;wBAEhJ,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,OAAO,CAAC;wBACjC,YAAY,CAAC,IAAI,CAAqB;4BACpC,WAAW,EAAE,OAAO;4BACpB,IAAI,EAAE,cAAc;4BACpB,IAAI,MAAA;4BACJ,YAAY,EAAE,YAAY;4BAC1B,qBAAqB,EAAE,QAAQ;4BAC/B,iBAAiB,mBAAA;yBAClB,CAAC,CAAC;wBAEH,SAAS;wBACT,OAAO,GAAG,cAAc,GAAG,IAAI,GAAG,YAAY,GAAG,iBAAiB,GAAG,EAAE,CAAC;wBACxE,YAAY,GAAG,KAAK,CAAC;oBACvB,CAAC;oBACD,KAAK,CAAC;YACV,CAAC;QACH,CAAC,QAAQ,IAAI,CAAC,OAAO,EAAE,EAAE;QAEzB,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,MAAM,CAAC,YAAY,CAAC;IACtB,CAAC;IACH,4BAAC;AAAD,CAjIA,AAiIC,CAjI0C,uBAAU,GAiIpD;AAjIY,sDAAqB","file":"utilities/parser/InterfaceParserHelper.js","sourcesContent":["import { BaseParser } from './BaseParser';\nimport { IInterfaceProperty, InterfacePropertyType } from './interfaces';\n\nconst JSDOC_DEFAULT = '@default';\nconst JSDOC_DEFAULTVALUE = '@defaultvalue';\nconst JSDOC_DEPRECATED = '@deprecated';\n/**\n * Supporting enum for the parser, used internally within the parser only.\n */\nenum ParseState {\n  default, comment, declaration\n}\n\n/**\n * Helper Parser that parses interfaces.\n */\nexport class InterfaceParserHelper extends BaseParser {\n  private _state: ParseState = ParseState.default;\n\n  /**\n   * @constructor\n   * Helper Parser that parses interfaces.\n   */\n  public constructor(str: string) {\n    super(str);\n  }\n\n  public parse(): Array<IInterfaceProperty> {\n    let bank: Array<string> = [];\n    let comment = '';\n    let identifierName = '';\n    let type = '';\n    let returnResult = [];\n    let defaultValue = '';\n    let isDeprecated = false;\n    let deprecatedMessage = '';\n    let noClosingSymbolAsteriskPrereq = false;\n\n    this.eatUntil(/\\{/);\n    this.eat('{');\n\n    do {\n      switch (this._state) {\n        case ParseState.default:\n          this.eatSpacesAndNewlines();\n          if (this.eat('/')) {\n            if (this.peek() === '*') {\n              this._state = ParseState.comment;\n            } else {\n              // ignore // comments\n              this.eatUntil(/[\\n]/);\n            }\n          } else if (this.eat('}')) {\n            // closing\n            break;\n          } else {\n            this._state = ParseState.declaration;\n          }\n\n          break;\n        case ParseState.comment:\n          {\n            // the initial * are always the first * of a comment, and will be treated as decorative\n            let asterisk = this.eatWhile('*');\n            if ((noClosingSymbolAsteriskPrereq || asterisk.length > 0) && this.eat('/')) {\n              // encountered closing comment tag\n              comment = bank.join('').trim();\n              bank = [];\n              this._state = ParseState.default;\n              break;\n            }\n\n            noClosingSymbolAsteriskPrereq = false;\n\n            let tmp = this.eatUntil(/[\\n\\*@]/);\n            bank.push(tmp);\n\n            if (this.peek() === '*') {\n              let tmp = this.eatWhile('*');\n              if (this.peek() !== '/') {\n                // encountered a line like '* This is a comment with asterisks in the middle **** like this.'\n                bank.push(tmp);\n              } else {\n                // we have already encountered *, and the next symbol is /\n                noClosingSymbolAsteriskPrereq = true;\n              }\n            } else if (this.peek() === '\\n') {\n              // go to next line\n              this.eatSpacesAndNewlines();\n            } else if (this.peek() === '@') {\n              if (this.eatWord(JSDOC_DEFAULTVALUE) || this.eatWord(JSDOC_DEFAULT)) {\n                // this parser assumes @default values won't have a bunch of asterisks in the middle of it.\n                let tmp = this.eatUntil(/[\\*\\n]/);\n                defaultValue = tmp;\n                this.eatSpacesAndNewlines();\n              } else if (this.eatWord(JSDOC_DEPRECATED)) {\n                let tmp = this.eatUntil(/[\\*\\n]/);\n                isDeprecated = true;\n                deprecatedMessage = tmp;\n              } else {\n                bank.push(this.eat('@'));\n              }\n            }\n          }\n          break;\n        case ParseState.declaration:\n          {\n            this.eatSpacesAndNewlines();\n            let tmp = this.eatUntil(/[\\:\\;=]/);\n            identifierName = tmp.trim();\n            if (this.eat(':')) {\n              tmp = this.eatUntil(/\\;/);\n              type = tmp;\n\n            } else {\n              // encountered semicolon or =\n              type = 'unspecified';\n            }\n\n            this.eat(';'); // actually eat the semicolon\n\n            let isOptional = identifierName[identifierName.length - 1] === '?';\n            let propType = isDeprecated ? InterfacePropertyType.deprecated : (isOptional ? InterfacePropertyType.optional : InterfacePropertyType.required);\n\n            this._state = ParseState.default;\n            returnResult.push(<IInterfaceProperty>{\n              description: comment,\n              name: identifierName,\n              type,\n              defaultValue: defaultValue,\n              interfacePropertyType: propType,\n              deprecatedMessage\n            });\n\n            // resets\n            comment = identifierName = type = defaultValue = deprecatedMessage = '';\n            isDeprecated = false;\n          }\n          break;\n      }\n    } while (this.hasNext());\n\n    this.reset();\n    return returnResult;\n  }\n}\n"],"sourceRoot":"..\\..\\..\\src"}