{"version":3,"sources":["utilities/parser/EnumParserHelper.ts"],"names":[],"mappings":"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","file":"utilities/parser/EnumParserHelper.js","sourcesContent":["import { BaseParser } from './BaseParser';\nimport { IEnumProperty } from './interfaces';\n\n/**\n * Supporting enum for the parser, used internally within the parser only.\n */\nenum ParseState {\n  default, comment, declaration\n}\n\n/**\n * Helper Parser that parses enums.\n */\nexport class EnumParserHelper extends BaseParser {\n  private _state: ParseState = ParseState.default;\n\n  /**\n   * @constructor\n   * Helper Parser that parses enums.\n   */\n  public constructor(str: string) {\n    super(str);\n  }\n\n  public parse(): Array<IEnumProperty> {\n    let bank: Array<string> = [];\n    let comment = '';\n    let identifierName = '';\n    let returnResult = [];\n    let noClosingSymbolAsterixPrereq = false;\n\n    this.eatUntil(/\\{/);\n    this.eat('{');\n\n    do {\n      switch (this._state) {\n        case ParseState.default:\n          this.eatSpacesAndNewlines();\n          if (this.eat('/')) {\n            if (this.peek() === '*') {\n              this._state = ParseState.comment;\n            } else {\n              // ignore // comments\n              this.eatUntil(/[\\n]/);\n            }\n          } else if (this.eat('}')) {\n            // closing\n            break;\n          } else {\n            this._state = ParseState.declaration;\n          }\n\n          break;\n        case ParseState.comment:\n          {\n            // the initial * are always the first * of a comment, and will be treated as decorative\n            let asterisk = this.eatWhile('*');\n            if ((noClosingSymbolAsterixPrereq || asterisk.length > 0) && this.eat('/')) {\n              // encountered closing comment tag\n              comment = bank.join('').trim();\n              bank = [];\n              this._state = ParseState.default;\n              break;\n            }\n            noClosingSymbolAsterixPrereq = false;\n\n            bank.push(this.eatUntil(/[\\n\\*]/));\n            if (this.peek() === '*') {\n              let tmp = this.eatWhile('*');\n              if (this.peek() !== '/') {\n                // encountered a line like \"* This is a comment with asterisks in the middle **** like this.\"\n                bank.push(tmp);\n              } else {\n                noClosingSymbolAsterixPrereq = true;\n              }\n            } else if (this.peek() === '\\n') {\n              // go to next line\n              this.eatSpacesAndNewlines();\n            }\n          }\n          break;\n        case ParseState.declaration:\n          {\n            this.eatSpacesAndNewlines();\n            let tmp = this.eatUntil(/[=,\\}]/);\n            if (this.eat('=')) {\n              this.eatUntil(/[0-9]/);\n              this.eatUntil(/[,\\s]/);\n            }\n\n            if (this.peek() !== '}') {\n              this.next();\n            }\n\n            identifierName = tmp.trim();\n\n            this._state = ParseState.default;\n            returnResult.push(<IEnumProperty>{\n              description: comment,\n              name: identifierName,\n            });\n\n            comment = identifierName = '';\n            break;\n          }\n      }\n    } while (this.hasNext());\n    return returnResult;\n  }\n}\n"],"sourceRoot":"..\\..\\..\\src"}